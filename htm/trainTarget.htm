<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Train Target</title>
<link rel="icon" href="../img/favicon.png">
<link rel="shortcut icon" href="../img/favicon.png">
<link rel="apple-touch-icon" href="../img/favicon.png">
<meta name="viewport" content="width=device-width">
<!-- meta name="viewport" content="initial-scale=0.6"-->

<style type="text/css">
* {
	margin: 0;
	padding: 0;
	font-family: sans-serif, arial, helvetica, verdana, sans-serif;
	font-size: 25pt;
	-moz-box-sizing: border-box;
}
body {
	background-color: #EEE;
}
.map {
	background-image: url(../img/mapRotated.png);
	background-repeat: no-repeat;
	width: 610px;
	height:1270px;
}
#canvass {
	/* Main wrapper of map. */
	position: relative;
	width: 610px;
	height:1270px;
	overflow: hidden;
}
#canvass div {
	position: absolute;
}
#timetable {
	position: absolute;
	left: 370px;
	top: 330px;
	background-color: rgba(255,255,255,.9);
}
#timetable td {
	text-align: right;
}
.colHeads td {
	color: silver;
}
#station {
	border-radius: 50%;
	background-color: rgba(0,128,255,0.5);
	width: 10px;
	height: 10px;
	left: 300px;
	top: 90px;
}
.circleLabel {
	color: red;
	font-weight: bold;
	text-align: center;
}
.circleLabel i {
	color: #555;
	font-weight: normal;
	text-align: center;
	font-style: normal;
}
.circle {
	border-radius: 50%;
	-webkit-box-shadow: 0 0 20px 0 rgba(255,0,0,0.5);
	box-shadow: 		0 0 20px 0 rgba(255,0,0,0.5);
	border: 1px solid rgba(255,0,0,.3);
	width: 200px;
	height: 200px;
	top: 176px;
	left: 479px;
}
#circle1 {
	width: 300px;
	height: 300px;
	top: 126px;
	left: 429px;
}
#circle2 {
	width: 400px;
	height: 400px;
	top: 76px;
	left: 379px;
}
</style>
<script type="text/javascript">
var path = [
	 {name:"walstab", dist:622, length:278, duration:60} // 1min
	,{name:"dendy", dist:622, length:278, duration:270} // 4.5min
	,{name:"church", dist:396, length:800, duration:390} // 6.5min
	,{name:"railwayWalk", dist:30, length:30, duration:30} //0.5min
];
var train = []; // Set to trainMonFri, trainSat or trainSun.
var trainMonFri = [
	/*
	 * Each has fields added to:
	 * {depart:"7:00"
	 *	,elUi:<ui circle element>
	 * 	,elUiLabel:<ui text label element>
	 *	,departSec:<depart value in seconds>
	 * }
	 */
	 {depart:"5:12"},{depart:"5:32"},{depart:"5:52"},{depart:"6:09"},{depart:"6:25"},{depart:"6:31"},{depart:"6:39"},{depart:"6:48"},{depart:"6:55"}
	,{depart:"7:03"},{depart:"7:12"},{depart:"7:23"},{depart:"7:31"},{depart:"7:38"},{depart:"7:46"},{depart:"7:53"},{depart:"8:01"},{depart:"8:08"},{depart:"8:16"},{depart:"8:23"},{depart:"8:30"},{depart:"8:38"},{depart:"8:45"},{depart:"8:54"}
	,{depart:"9:01"},{depart:"9:12"},{depart:"9:27"},{depart:"9:42"},{depart:"9:57"},{depart:"10:12"},{depart:"10:27"},{depart:"10:42"},{depart:"10:57"}
	,{depart:"11:12"},{depart:"11:27"},{depart:"11:42"},{depart:"11:57"},{depart:"12:12"},{depart:"12:27"},{depart:"12:42"},{depart:"12:57"}
	,{depart:"13:12"},{depart:"13:27"},{depart:"13:42"},{depart:"13:57"},{depart:"14:12"},{depart:"14:27"},{depart:"14:42"},{depart:"14:57"}
	,{depart:"15:12"},{depart:"15:27"},{depart:"15:42"},{depart:"15:52"},{depart:"16:02"},{depart:"16:12"},{depart:"16:22"},{depart:"16:32"},{depart:"16:42"},{depart:"16:52"}
	,{depart:"17:02"},{depart:"17:12"},{depart:"17:19"},{depart:"17:27"},{depart:"17:34"},{depart:"17:42"},{depart:"17:49"},{depart:"17:57"},{depart:"18:04"},{depart:"18:12"},{depart:"18:19"},{depart:"18:27"},{depart:"18:44"}
	,{depart:"19:01"},{depart:"19:14"},{depart:"19:29"},{depart:"19:44"},{depart:"19:59"},{depart:"20:14"},{depart:"20:29"},{depart:"20:44"},{depart:"20:59"}
	,{depart:"21:19"},{depart:"21:39"},{depart:"21:59"},{depart:"22:19"},{depart:"22:39"},{depart:"22:59"},{depart:"23:19"},{depart:"23:39"},{depart:"0:14"}
	,{depart:"1:07"},{depart:"2:07"}


];
var trainSat = [
	 {depart:"3:09"},{depart:"4:07"},{depart:"5:07"},{depart:"5:37"},{depart:"6:07"},{depart:"6:37"},{depart:"6:57"}
	,{depart:"7:17"},{depart:"7:37"},{depart:"7:57"},{depart:"8:17"},{depart:"8:37"},{depart:"8:57"}
	,{depart:"9:17"},{depart:"9:37"},{depart:"9:57"},{depart:"10:17"},{depart:"10:37"},{depart:"10:57"}
	,{depart:"11:17"},{depart:"11:37"},{depart:"11:57"},{depart:"12:17"},{depart:"12:37"},{depart:"12:46"},{depart:"12:57"}
	,{depart:"13:17"},{depart:"13:37"},{depart:"13:57"},{depart:"14:17"},{depart:"14:37"},{depart:"14:57"}
	,{depart:"15:17"},{depart:"15:37"},{depart:"15:57"},{depart:"16:17"},{depart:"16:37"},{depart:"16:57"}
	,{depart:"17:17"},{depart:"17:37"},{depart:"17:57"},{depart:"18:17"},{depart:"18:37"},{depart:"18:57"}
	,{depart:"19:17"},{depart:"19:37"},{depart:"19:57"},{depart:"20:16"},{depart:"20:36"},{depart:"20:56"}
	,{depart:"21:16"},{depart:"21:36"},{depart:"21:56"},{depart:"22:16"},{depart:"22:36"},{depart:"22:56"}
	,{depart:"23:16"},{depart:"23:36"},{depart:"0:14"},{depart:"1:07"},{depart:"2:07"},{depart:"3:07"}

];
var trainSun = [
	{depart:"3:09"},{depart:"4:07"},{depart:"5:07"},{depart:"6:07"}
	,{depart:"7:07"},{depart:"7:37"},{depart:"8:17"},{depart:"8:57"}
	,{depart:"9:37"},{depart:"9:57"},{depart:"10:17"},{depart:"10:37"},{depart:"10:57"}
	,{depart:"11:17"},{depart:"11:37"},{depart:"11:57"},{depart:"12:06"},{depart:"12:17"},{depart:"12:37"},{depart:"12:57"}
	,{depart:"13:17"},{depart:"13:37"},{depart:"13:57"},{depart:"14:17"},{depart:"14:26"},{depart:"14:37"},{depart:"14:57"}
	,{depart:"15:17"},{depart:"15:37"},{depart:"15:57"},{depart:"16:17"},{depart:"16:37"},{depart:"16:57"}
	,{depart:"17:17"},{depart:"17:37"},{depart:"17:57"},{depart:"18:17"},{depart:"18:37"},{depart:"18:57"}
	,{depart:"19:17"},{depart:"19:37"},{depart:"19:57"},{depart:"20:16"},{depart:"20:36"}
	,{depart:"21:00"},{depart:"21:15"},{depart:"21:30"},{depart:"21:45"},{depart:"22:00"},{depart:"22:15"}
	,{depart:"22:30"},{depart:"22:45"},{depart:"23:00"},{depart:"23:21"},{depart:"23:45"}
];

var ui = {
	trainsInRange:[]
	,trainsRendered:[]
	,station:[305,95] //[553,265]
	,canvass:null
	,elTimetable:null
	,init: function() {
		this.canvass = el("#canvass");
		//this.elTimeNow = el("#timeNow");
		this.elTimetable = el("#timetable");
		for (var iT = 0; iT < train.length; iT++) {
			var t = train[iT];
			t.departSec = calc.toSec(t.depart);
		}
	}
	,updateRenderedTrain: function (ixTrain) {
		var iSecNow = heart.getNow();
		var t = train[ixTrain];
		var iSecDiff = Math.max(1, (t.departSec - iSecNow));
		// Do not delete, handy for debugging :: var iWH = (60 - (new Date()).getSeconds()) * 5;
		var iWH = calc.secToPx(iSecDiff); //pxPerSec;
		t.elUi.style.width = iWH + "px";
		t.elUi.style.height = iWH + "px";
		t.elUi.style.left = (this.station[0] - (iWH / 2)) + "px";
		t.elUi.style.top = (this.station[1] - (iWH / 2)) + "px";
		t.elUiLabel.style.top = (iWH - 0) + "px";
		t.elUiLabel.style.width = (iWH) + "px";
		t.elUiLabel.innerHTML = calc.secToMS(iSecDiff) + "<br/><i>" + t.depart + "</i>";
	}
	,showTimetable: function() {
		var sOut = "<table class=\"timetable\">";
		var iNow = heart.getNow();
		sOut += "<tr><th colspan=\"2\">" + heart.getNowHMS() + "</th></tr>";
		sOut += "<tr class=\"colHeads\"><td>Train</td><td>&nbsp;&nbsp;Home</td></tr>";
		for (var iTT = 0; iTT < this.trainsInRange.length; iTT++) {
			var trainTemp = train[this.trainsInRange[iTT]];
			sOut += "<tr><td>" + trainTemp.depart
				+ "</td><td>" + calc.secToMS(trainTemp.departSec - (iNow + calc.secWalkingTime))
				+ "</td></tr>";
		}
		sOut += "</table>"
		this.elTimetable.innerHTML = sOut;
	}
	,showTrainsInTimeRange: function() {
		var elFrag = document.createDocumentFragment();

		var sOld = this.trainsRendered.join("|");
		for (var iTiv = 0; iTiv < this.trainsRendered.length; iTiv++) {
			var ixTrain = this.trainsRendered[iTiv];
			if (this.trainsInRange.indexOf(ixTrain) == -1) {
				this.canvass.removeChild(train[ixTrain].elUi);
				this.trainsRendered.splice(iTiv, 1);
			}
		}
		for (var iTiv = 0; iTiv < this.trainsInRange.length; iTiv++) {
			var ixTrain = this.trainsInRange[iTiv];
			if (this.trainsRendered.indexOf(ixTrain) == -1) {
				// Is in range but not rendered.
				var divTrain = document.createElement("div");
				divTrain.id = "t" + ixTrain;
				divTrain.className = "circle";
				elFrag.appendChild(divTrain);

				var divLabel = document.createElement("div");
				divLabel.innerHTML = "0:00";
				divLabel.className = "circleLabel";
				divTrain.appendChild(divLabel);

				this.canvass.appendChild(elFrag);
				this.trainsRendered.push(ixTrain);
				train[ixTrain].elUi = divTrain;
				train[ixTrain].elUiLabel = divLabel;
				this.updateRenderedTrain(ixTrain);
			} else {
				// Is in range and rendered.
				this.updateRenderedTrain(ixTrain);
			}
		}
	}
}
var calc = {
	pxPerSec: (1.7)
	,secWalkingTime: 780 // = 13 * 60
	,secToPx:function(iSec) {
		return (iSec * this.pxPerSec);
	}
	,secToMS: function(iSec) {
		var sSign = (iSec < 0) ? "-" : "";
		iSec = Math.abs(iSec);
		var iS = iSec % 60;
		var iSec = Math.round((iSec - iS) / 60);
		var iM = iSec; // % 60;
		return sSign + iM + (iS < 10 ? ":0" : ":") + iS;
	}
	,secToHMS: function(iSec) {
		var sSign = (iSec < 0) ? "-" : "";
		iSec = Math.abs(iSec);
		var iS = iSec % 60;
		var iSec = Math.round((iSec - iS) / 60);
		var iM = iSec % 60;
		var iH = Math.round((iSec - iM) / 60);
		return sSign + iH + (iM < 10 ? ":0" : ":") + iM + (iS < 10 ? ":0" : ":") + iS;
	}
	,toSec: function(vIn) {
		var asIn = vIn.split(":");
		return (parseInt(asIn[0]) * 3600)
			+ (parseInt(asIn[1]) * 60)
			+ ((asIn.length > 2) ? parseInt(asIn[1]) : 0)
			;
	}
}
function el(sXPath) {
	return document.querySelector(sXPath);
}
var iTimeFaker = 0 // 4 * -60; // How many seconds to advance each beat.
var isDebug = false;
var heart = {
	beatInterval: 1
	,init: function() {
		/* Called once on load. */
		this.beat();
		setInterval(function(){heart.beat();}, this.beatInterval * 1000);
	}
	,getNowTimeArray: function() {
		var dt = new Date();
		return [
			dt.getHours()
			,dt.getMinutes()
			,dt.getSeconds()
		]
	}
	,getNowHMS: function() {
		var aiNow = this.getNowTimeArray();
		return aiNow[0] + (aiNow[1] < 10 ? ":0" : ":") + aiNow[1] + (aiNow[2] < 10 ? ":0" : ":") + aiNow[2];
	}
	,getNow: function() {
		var aiNow = this.getNowTimeArray();
		if (isDebug) {
			aiNow[0] = 6;
			aiNow[1] = 51;
			aiNow[2] = 1;
			iTimeFaker += this.beatInterval;
		}
		return (aiNow[0] * 3600) + (aiNow[1] * 60) + aiNow[2] + iTimeFaker;
	}
	,updateTrainsInTimeRange: function() {
		var iNow = this.getNow();
		ui.trainsInRange = [];
		for (var iT = 0; iT < train.length; iT++) {
			var iSecToGo = train[iT].departSec - iNow;
			if (iSecToGo > 0) {
				ui.trainsInRange.push(iT);
			}
			if (ui.trainsInRange.length > 3) {
				break;
			}
		}
	}
	,beat: function() {
		this.updateTrainsInTimeRange();
		ui.showTrainsInTimeRange();
		ui.showTimetable();
	}
};
function doOnLoad() {
	var iDoW = (new Date()).getDay();
	//iDoW = 6;
	if (iDoW == 0) {
		train = trainSun;
	} else if (iDoW == 6) {
		train = trainSat;
	} else {
		train = trainMonFri;
	}
	ui.init();
	heart.init();
}
</script>
</head>
<body onload="doOnLoad();">
<div id="canvass">
	<div class="map">&nbsp;</div>
	<div id="station"></div>
</div>
<div id="timetable"></div>
</body>
</html>
